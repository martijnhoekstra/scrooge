/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scrooge.test.gold.thriftscala

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import com.twitter.scrooge.adapt.{AccessRecorder, AdaptTProtocol, Decoder}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.Map


object Response extends ValidatingThriftStructCodec3[Response] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("Response")
  val StatusCodeField: TField = new TField("statusCode", TType.I32, 1)
  val StatusCodeFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val ResponseUnionField: TField = new TField("responseUnion", TType.STRUCT, 2)
  val ResponseUnionFieldManifest: Manifest[com.twitter.scrooge.test.gold.thriftscala.ResponseUnion] = implicitly[Manifest[com.twitter.scrooge.test.gold.thriftscala.ResponseUnion]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      StatusCodeField,
      false,
      false,
      StatusCodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ResponseUnionField,
      false,
      false,
      ResponseUnionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Response): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: Response): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.statusCode)
    buf ++= validateField(item.responseUnion)
    buf.toList
  }

  def withoutPassthroughFields(original: Response): Response =
    new Immutable(
      statusCode =
        {
          val field = original.statusCode
          field
        },
      responseUnion =
        {
          val field = original.responseUnion
          com.twitter.scrooge.test.gold.thriftscala.ResponseUnion.withoutPassthroughFields(field)
        }
    )

  override def encode(_item: Response, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  @volatile private[this] var adaptiveDecoder: Decoder[Response] = _

  private[this] val accessRecordingDecoderBuilder: AccessRecorder => Decoder[Response] = { accessRecorder =>
    new Decoder[Response] {
      def apply(prot: AdaptTProtocol): Response = new AccessRecordingWrapper(lazyDecode(prot), accessRecorder)
    }
  }
  private[this] val fallbackDecoder = new Decoder[Response] {
    def apply(prot: AdaptTProtocol): Response = lazyDecode(prot)
  }
  private[this] def adaptiveDecode(_iprot: AdaptTProtocol): Response = {
    val adaptContext = _iprot.adaptContext
    val reloadRequired = adaptContext.shouldReloadDecoder
    synchronized {
      if (adaptiveDecoder == null || reloadRequired) {
        adaptiveDecoder = adaptContext.buildDecoder(this, fallbackDecoder, accessRecordingDecoderBuilder)
      }
    }
    adaptiveDecoder(_iprot)
  }

  /**
   * AccessRecordingWrapper keeps track of fields that are accessed while
   * delegating to underlying struct.
   */
  private[this] class AccessRecordingWrapper(underlying: Response, accessRecorder: AccessRecorder) extends Response {
    override def statusCode: Int = {
      accessRecorder.fieldAccessed(1)
      underlying.statusCode
    }
    override def responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = {
      accessRecorder.fieldAccessed(2)
      underlying.responseUnion
    }
    override def write(_oprot: TProtocol): Unit = underlying.write(_oprot)

    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = underlying._passthroughFields
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): Response = {

    var statusCode: Int = 0
    var responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = null

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                statusCode = readStatusCodeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'statusCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                responseUnion = readResponseUnionValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'responseUnion' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      statusCode,
      responseUnion,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Response =
    _iprot match {
      case i: AdaptTProtocol => adaptiveDecode(i)
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thriftscala] def eagerDecode(_iprot: TProtocol): Response = {
    var statusCode: Int = 0
    var responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                statusCode = readStatusCodeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'statusCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
                responseUnion = readResponseUnionValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'responseUnion' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      statusCode,
      responseUnion,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    statusCode: Int,
    responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion
  ): Response =
    new Immutable(
      statusCode,
      responseUnion
    )

  def unapply(_item: Response): _root_.scala.Option[_root_.scala.Tuple2[Int, com.twitter.scrooge.test.gold.thriftscala.ResponseUnion]] = _root_.scala.Some(_item.toTuple)


  @inline private[thriftscala] def readStatusCodeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeStatusCodeField(statusCode_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusCodeField)
    writeStatusCodeValue(statusCode_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusCodeValue(statusCode_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(statusCode_item)
  }

  @inline private[thriftscala] def readResponseUnionValue(_iprot: TProtocol): com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = {
    com.twitter.scrooge.test.gold.thriftscala.ResponseUnion.decode(_iprot)
  }

  @inline private def writeResponseUnionField(responseUnion_item: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ResponseUnionField)
    writeResponseUnionValue(responseUnion_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeResponseUnionValue(responseUnion_item: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion, _oprot: TProtocol): Unit = {
    responseUnion_item.write(_oprot)
  }


  object Immutable extends ThriftStructCodec3[Response] {
    override def encode(_item: Response, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Response = Response.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Response] = Response.metaData
  }

  /**
   * The default read-only implementation of Response.  You typically should not need to
   * directly reference this class; instead, use the Response.apply method to construct
   * new instances.
   */
  class Immutable(
      val statusCode: Int,
      val responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Response {
    def this(
      statusCode: Int,
      responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion
    ) = this(
      statusCode,
      responseUnion,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val statusCode: Int,
      val responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Response {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Response trait with additional state or
   * behavior and implement the read-only methods from Response using an underlying
   * instance.
   */
  trait Proxy extends Response {
    protected def _underlying_Response: Response
    override def statusCode: Int = _underlying_Response.statusCode
    override def responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = _underlying_Response.responseUnion
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_Response._passthroughFields
  }
}

/**
 * Prefer the companion object's [[com.twitter.scrooge.test.gold.thriftscala.Response.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait Response
  extends ThriftStruct
  with _root_.scala.Product2[Int, com.twitter.scrooge.test.gold.thriftscala.ResponseUnion]
  with ValidatingThriftStruct[Response]
  with java.io.Serializable
{
  import Response._

  def statusCode: Int
  def responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Int = statusCode
  def _2: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = responseUnion

  def toTuple: _root_.scala.Tuple2[Int, com.twitter.scrooge.test.gold.thriftscala.ResponseUnion] = {
    (
      statusCode,
      responseUnion
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeStatusCodeValue(statusCode, _oprot)
                _root_.scala.Some(Response.StatusCodeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (responseUnion ne null) {
                writeResponseUnionValue(responseUnion, _oprot)
                _root_.scala.Some(Response.ResponseUnionField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Response = {
    var statusCode: Int = this.statusCode
    var responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = this.responseUnion
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        statusCode = readStatusCodeValue(_blob.read)
      case 2 =>
        responseUnion = readResponseUnionValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      statusCode,
      responseUnion,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Response = {
    var statusCode: Int = this.statusCode
    var responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = this.responseUnion

    _fieldId match {
      case 1 =>
        statusCode = 0
      case 2 =>
        responseUnion = null
      case _ =>
    }
    new Immutable(
      statusCode,
      responseUnion,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetStatusCode: Response = unsetField(1)

  def unsetResponseUnion: Response = unsetField(2)


  override def write(_oprot: TProtocol): Unit = {
    Response.validate(this)
    _oprot.writeStructBegin(Struct)
    writeStatusCodeField(statusCode, _oprot)
    if (responseUnion ne null) writeResponseUnionField(responseUnion, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    statusCode: Int = this.statusCode,
    responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = this.responseUnion,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Response =
    new Immutable(
      statusCode,
      responseUnion,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Response]

  private def _equals(x: Response, y: Response): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[Response])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.statusCode
    case 1 => this.responseUnion
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Response"

  def _codec: ValidatingThriftStructCodec3[Response] = Response
}

private class Response__AdaptDecoder {

  def decode(_iprot: AdaptTProtocol): Response = {
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    val adapt = new Response__Adapt(
      _iprot,
      _iprot.buffer,
      _start_offset)

    AdaptTProtocol.usedStartMarker(1)
    var statusCode: Int = 0
    AdaptTProtocol.usedEndMarker(1)

    AdaptTProtocol.usedStartMarker(2)
    var responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = null
    AdaptTProtocol.usedEndMarker(2)

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 => {
            _field.`type` match {
              case TType.I32 =>
                AdaptTProtocol.usedStartMarker(1)
                statusCode = Response.readStatusCodeValue(_iprot)
                AdaptTProtocol.usedEndMarker(1)
                AdaptTProtocol.unusedStartMarker(1)
                _iprot.offsetSkipI32()
                AdaptTProtocol.unusedEndMarker(1)
              case _actualType =>
                val _expectedType = TType.I32
                throw AdaptTProtocol.unexpectedTypeException(_expectedType, _actualType, "statusCode")
            }
            AdaptTProtocol.usedStartMarker(1)
            adapt.set_statusCode(statusCode)
            AdaptTProtocol.usedEndMarker(1)
          }
          case 2 => {
            _field.`type` match {
              case TType.STRUCT =>
                AdaptTProtocol.usedStartMarker(2)
                responseUnion = Response.readResponseUnionValue(_iprot)
                AdaptTProtocol.usedEndMarker(2)
                AdaptTProtocol.unusedStartMarker(2)
                _iprot.offsetSkipStruct()
                AdaptTProtocol.unusedEndMarker(2)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw AdaptTProtocol.unexpectedTypeException(_expectedType, _actualType, "responseUnion")
            }
            AdaptTProtocol.usedStartMarker(2)
            adapt.set_responseUnion(responseUnion)
            AdaptTProtocol.usedEndMarker(2)
          }

          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    adapt.set__endOffset(_iprot.offset)
    if (_passthroughFields != null) {
      adapt.set__passthroughFields(_passthroughFields.result())
    }
    adapt
  }
}

/**
 * This is the base template for Adaptive decoding. This class gets pruned and
 * reloaded at runtime.
 */
private class Response__Adapt(
    _proto: AdaptTProtocol,
    _buf: Array[Byte],
    _start_offset: Int) extends Response {

  /**
   * In case any unexpected field is accessed, fallback to eager decoding.
   */
  private[this] lazy val delegate: Response = {
    val bytes = _root_.java.util.Arrays.copyOfRange(_buf, _start_offset, _end_offset)
    val proto = _proto.withBytes(bytes)
    Response.eagerDecode(proto)
  }

  private[this] var m_statusCode: Int = _
  def set_statusCode(statusCode: Int): Unit = m_statusCode = statusCode
  // This will be removed by ASM if field is unused.
  def statusCode: Int = m_statusCode
  // This will be removed by ASM if field is used otherwise renamed to statusCode.
  def delegated_statusCode: Int = delegate.statusCode

  private[this] var m_responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = _
  def set_responseUnion(responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion): Unit = m_responseUnion = responseUnion
  // This will be removed by ASM if field is unused.
  def responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = m_responseUnion
  // This will be removed by ASM if field is used otherwise renamed to responseUnion.
  def delegated_responseUnion: com.twitter.scrooge.test.gold.thriftscala.ResponseUnion = delegate.responseUnion


  private[this] var _end_offset: Int = _
  def set__endOffset(offset: Int) = _end_offset = offset

  private[this] var __passthroughFields: immutable$Map[Short, TFieldBlob] = Response.NoPassthroughFields
  def set__passthroughFields(passthroughFields: immutable$Map[Short, TFieldBlob]): Unit =
    __passthroughFields = passthroughFields

  override def _passthroughFields: immutable$Map[Short, TFieldBlob] = __passthroughFields

  /*
  Override the super hash code to make it a lazy val rather than def.

  Calculating the hash code can be expensive, caching it where possible
  can provide significant performance wins. (Key in a hash map for instance)
  Usually not safe since the normal constructor will accept a mutable map or
  set as an arg
  Here however we control how the class is generated from serialized data.
  With the class private and the contract that we throw away our mutable references
  having the hash code lazy here is safe.
  */
  override lazy val hashCode: Int = super.hashCode

  override def write(_oprot: TProtocol): Unit = {
    _oprot match {
      case i: AdaptTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
      case _ => super.write(_oprot)
    }
  }
}
